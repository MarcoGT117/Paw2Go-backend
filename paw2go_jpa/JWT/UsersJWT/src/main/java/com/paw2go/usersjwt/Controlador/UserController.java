package com.paw2go.usersjwt.Controlador;


import com.paw2go.usersjwt.Modelo.AuthenticationRequest;
import com.paw2go.usersjwt.Modelo.AuthenticationResponse;
import com.paw2go.usersjwt.Modelo.User;
import com.paw2go.usersjwt.Repositorio.UserRepository;
import com.paw2go.usersjwt.Servicio.MyUserDetailsService;
import com.paw2go.usersjwt.Servicio.UserService;
import com.paw2go.usersjwt.Util.JwtUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

//Adaptacion lista

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private MyUserDetailsService miUserDetailsService;

    @Autowired
    private JwtUtil jwtTokenUtil;

    //API servicios , endpoints disponibles
    //primero se debe verificar/autentificar, sacando una jwt en
    //el endpoint /verificacion con metodo POST y en el body → {"username":"correo de algun usuario en la database", "password":"el contraseña de ese usuario"
    //usar el jwt en el header = key Authorization  value "Bearer Aqui el jwt que se genero"

    //http://localhost:8080/user/usertoken
    @PostMapping(path = "/usertoken")
    //GENERAR TOKEN JWT solo a usuarios registrados http//localhost:8080/verificacion
    public ResponseEntity<?> generarTokenVerificacion(@RequestBody AuthenticationRequest solicitudVerificacion) throws Exception {
        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(solicitudVerificacion.getUsername(), solicitudVerificacion.getPassword())
            );
        } catch (BadCredentialsException e) {
            throw new Exception("No se encontro ningun usuario con el correo: " + solicitudVerificacion.getUsername(), e);
        }


        final UserDetails miUsuarioDetalles = miUserDetailsService
                .loadUserByUsername(solicitudVerificacion.getUsername());//get correo, verifica correo no nombre

        final String jwt = jwtTokenUtil.generateToken(miUsuarioDetalles);

        return ResponseEntity.ok(new AuthenticationResponse(jwt));
    }

    //http://localhost:8080/user/dispalyall
    @GetMapping(path = "/dispalyall") //MUESTRA TODOS LOS USUARIOS  http://localhost:8080/dispalyall
    public @ResponseBody
    ResponseEntity<Iterable<User>> getAllUsers() {
        // This returns a JSON or XML with the users
        return new ResponseEntity<>(userRepository.findAll(), HttpStatus.OK);
    }

    //http://localhost:8080/user/dispalyuser/id
    @GetMapping(path = "/dispalyuser/{id}") //MUESTRA SOLO UN USUARIO
    public ResponseEntity<Object> getUser(@PathVariable int id) {
        if (userRepository.existsById(id)) {
            return new ResponseEntity<>(userRepository.findById(id), HttpStatus.OK);
        } else {
            return new ResponseEntity<>("El usuario con el id: " + id + " No existe", HttpStatus.NOT_FOUND);
        }
    }

    //http://localhost:8080/user/newuser
    @PostMapping(path = "/newuser") // Map ONLY POST Requests
    public ResponseEntity<Object> addNewUser(@RequestBody User user) {
        userRepository.save(user);
        return new ResponseEntity<>("El usuario\n" + "con el id:" + user.getIdUsers() + " " + user.getFullName() + "  " + user.getEmail() + "\nSe ha registrado con etxsito", HttpStatus.CREATED);
    }

    //http://localhost:8080/user/update/id  el numero id del que queremos modificar
    @PutMapping(path = "/update/{id}") //Actualizar registro
    public ResponseEntity<Object> updateUser(@PathVariable int id, @RequestBody User user) {
        User nuevo = new User();
        nuevo = userRepository.findByIdUsers(id);
        nuevo.setIdUsers(user.getIdUsers());
        nuevo.setFullName(user.getFullName());
        nuevo.setEmail(user.getEmail());
        nuevo.setUserName(user.getUserName());
        nuevo.setPassword(user.getPassword());
        userRepository.save(nuevo);
        return new ResponseEntity<>("Usuario: " + id + "\n fue actualizado exitosamente", HttpStatus.ACCEPTED);
        //"El usuario: "+userRepository.findById(id)+" se ha actualizado";
    }

    //http://localhost:8080/user/deleteuser/id
    @DeleteMapping(path = "/deleteuser/{id}") //ELIMINA UN USUARIO
    public @ResponseBody
    String deleteUser(@PathVariable Integer id) {
        userRepository.deleteById(id);
        return "usuario con id: " + id + " Se ha borrado de la databeis pá siempre";//no va a encontrar a nadie porque ya esta borrado
    }
}

